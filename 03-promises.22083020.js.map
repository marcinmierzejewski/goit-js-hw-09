{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAgB,CACpBC,QAAS,IAGLC,EAAkBC,SAASC,cAAc,uBACzCC,EAAiBF,SAASC,cAAc,sBACxCE,EAAcH,SAASC,cAAc,wBA2B3C,SAASG,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,UAAEN,QAAUC,IAEpBM,EAAO,UAAEP,QAAUC,MAEpBA,MAnCcN,SAASC,cAAc,SAE/Ba,iBAAiB,UAE9B,SAA2BC,GACzBA,EAAEC,iBACF,IAAIC,EAAQC,OAAOnB,EAAgBoB,OACnC,IAAK,IAAIC,EAAW,EAAGA,GAAYjB,EAAYgB,MAAOC,IACpDhB,EAAcgB,EAAUH,GACrBI,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MAEjBX,EAAA2B,OAAOC,QACL,qBAAqBlB,QAAeC,MACpCT,MAGH2B,OAAM,EAACnB,SAAEA,EAAQC,MAAEA,MAElBX,EAAA2B,OAAOG,QAAQ,oBAAoBpB,QAAeC,MAChDT,MAGNoB,GAASC,OAAOhB,EAAeiB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst notifyOptions = {\n  opacity: 0.9,\n};\n\nconst firstDelayField = document.querySelector(\"input[name='delay']\");\nconst delayStepField = document.querySelector(\"input[name='step']\");\nconst amountField = document.querySelector(\"input[name='amount']\");\nconst promisesForm = document.querySelector('.form');\n\npromisesForm.addEventListener('submit', promisesGenerator);\n\nfunction promisesGenerator(e) {\n  e.preventDefault();\n  let delay = Number(firstDelayField.value);\n  for (let position = 1; position <= amountField.value; position++) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(\n          `Fulfilled promise ${position} in ${delay}ms`,\n          notifyOptions\n        );\n      })\n      .catch(({ position, delay }) => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`, \n          notifyOptions\n        );\n      });\n    delay += Number(delayStepField.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$notifyOptions","opacity","$47d4ff9957288465$var$firstDelayField","document","querySelector","$47d4ff9957288465$var$delayStepField","$47d4ff9957288465$var$amountField","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","position1","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.22083020.js.map"}